<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on PzNotes - Learning and Sharing</title>
    <link>https://whu-pzhang.github.io/post/</link>
    <description>Recent content in Posts on PzNotes - Learning and Sharing</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 11 May 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://whu-pzhang.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>用ctypes调用C函数</title>
      <link>https://whu-pzhang.github.io/python-ctypes/</link>
      <pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/python-ctypes/</guid>
      <description>&lt;p&gt;现在已有一些C语言函数被编译成共享库，我们想从纯Python中直接调用这些函数，而不必额外编写C代码或者使用第三方的扩展工具。&lt;/p&gt;

&lt;p&gt;对于这样的需求，使用Python标准库中的&lt;code&gt;ctypes&lt;/code&gt;模块来实现是非常容易的。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Madagascar之colormap</title>
      <link>https://whu-pzhang.github.io/mada-colormaps/</link>
      <pubDate>Wed, 10 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/mada-colormaps/</guid>
      <description>&lt;p&gt;平常作图时都会遇到如何选择colormap的问题。
而Madagascar文档也没有对各种colormap作系统的说明。&lt;/p&gt;

&lt;p&gt;本文梳理了Madagascar中现有的各种colormap。&lt;/p&gt;

&lt;p&gt;本文 &lt;code&gt;SConstruct&lt;/code&gt; 脚本位于 &lt;a href=&#34;https://github.com/whu-pzhang/Mada/tree/master/colormap&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>NumPy学习笔记</title>
      <link>https://whu-pzhang.github.io/learn-numpy/</link>
      <pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/learn-numpy/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.numpy.org/&#34;&gt;NumPy&lt;/a&gt; 为 Python下科学计算的基础包。&lt;/p&gt;

&lt;h2 id=&#34;简介&#34;&gt;简介&lt;/h2&gt;

&lt;p&gt;NumPy 的出现主要是弥补 Python 数值计算的不足。为 Python 科学计算提供了强大的支撑。&lt;/p&gt;

&lt;p&gt;NumPy 主要提供了两种对象：ndarray(N-dimensional array)和 ufunc(Unversal function)。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>添加程序到Madagascar中</title>
      <link>https://whu-pzhang.github.io/%E6%B7%BB%E5%8A%A0%E7%A8%8B%E5%BA%8F%E5%88%B0madagascar%E4%B8%AD/</link>
      <pubDate>Thu, 03 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/%E6%B7%BB%E5%8A%A0%E7%A8%8B%E5%BA%8F%E5%88%B0madagascar%E4%B8%AD/</guid>
      <description>&lt;p&gt;有时候自己利用Madagascar编写了一些数据处理的程序，每次调用都需要将源码放到需要用的目
录重新编译，然后再在SConstruct中调用,类似这样：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;prog = Program(&#39;Mcode.c&#39;)
exe = str(prog[0])
# proj = Project()
# prog = proj.Program(&#39;Mcode.c&#39;)
Flow(&#39;out&#39;, [&#39;inp1&#39;, &#39;inp2&#39;, exe],
    &#39;&#39;&#39;
    ${SOURCES[2].abspath} inp2=${SOURCES[1]}
    &#39;&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;若是只在一个project中用到倒还好，但若是比较通用的程序，在不同的文件夹中都要这么来调
用的话未免太麻烦。而将我们的代码直接加入Mada中，就可以直接调用。不用将源码拷来拷去还
要编译了。当然了，加入Mada的程序一般是我们的最终版本，测试的程序还是就放在测试目录中
比较好。&lt;/p&gt;

&lt;p&gt;本文介绍怎么样将自己的程序加入到Madagascar中。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux下安装SEPlib</title>
      <link>https://whu-pzhang.github.io/install-seplib-on-linux/</link>
      <pubDate>Mon, 18 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/install-seplib-on-linux/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://sepwww.stanford.edu/doku.php?id=sep:software:seplib&#34;&gt;SEPlib&lt;/a&gt; 是由
Stanford Exploration Project 开发并维护的地震勘探开源软件包。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python科学计算环境Anaconda</title>
      <link>https://whu-pzhang.github.io/python-anaconda/</link>
      <pubDate>Tue, 05 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/python-anaconda/</guid>
      <description>&lt;p&gt;本文记录Python科学计算发行版Anaconda的介绍，安装以及后续的一些应用。&lt;/p&gt;

&lt;h2 id=&#34;anaconda-特性&#34;&gt;Anaconda 特性&lt;/h2&gt;

&lt;p&gt;主页： &lt;a href=&#34;https://www.continuum.io/&#34;&gt;https://www.continuum.io/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;包含了众多流行的科学、教学、工程和数据分析的Python包&lt;/li&gt;
&lt;li&gt;完全开源、免费&lt;/li&gt;
&lt;li&gt;对于学术用途可以申请免费的加速 icense&lt;/li&gt;
&lt;li&gt;全平台支持： Linux、Windows、Mac&lt;/li&gt;
&lt;li&gt;支持Python2.6、2.7、3.4、3.5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在C程序中读写SU格式文件</title>
      <link>https://whu-pzhang.github.io/read-and-write-su-in-c/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/read-and-write-su-in-c/</guid>
      <description>&lt;h2 id=&#34;序言&#34;&gt;序言&lt;/h2&gt;

&lt;p&gt;Seismic_Unix是处理勘探地震数据的好工具，SU文件格式是其内部的默认格式，有时候需要自己在程序
中读写SU文件。本文介绍如何在C程序中读写SU格式文件。&lt;/p&gt;

&lt;h2 id=&#34;子函数库&#34;&gt;子函数库&lt;/h2&gt;

&lt;p&gt;Seismic_Unix程序自带有子函数库，但是我没有找到相关的程序源码。。。。&lt;/p&gt;

&lt;p&gt;但是其中自带的 &lt;code&gt;segy.h&lt;/code&gt; 头文件可以帮助我们了解SU文件的道头格式，而且可以利用该头文件
来对SU格式的文件进行读写。&lt;/p&gt;

&lt;p&gt;关于SU文件格式可以参考&lt;a href=&#34;https://whu-pzhang.github.io/SU-and-Segy-format.html&#34;&gt;SU/SEGY文件格式&lt;/a&gt; 一文。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SU/SEGY文件格式</title>
      <link>https://whu-pzhang.github.io/su-and-segy-format/</link>
      <pubDate>Mon, 29 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/su-and-segy-format/</guid>
      <description>&lt;h2 id=&#34;序言&#34;&gt;序言&lt;/h2&gt;

&lt;p&gt;地震勘探中，地震数据是以地震道为单位进行组织的，最常用的格式即为SEG-Y格式，这种格式是由
SEG(Society of Exploration Geophysicists)提出的标准磁带数据格式之一，是石油行业使用
最为普遍的格式。而SU格式是 Seismic_Unix 软件包使用的数据格式，可以看作的SEGY格式的简化，
由于 Seismic_Unix 软件的广泛使用，该种格式也有着普遍的使用。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux下安装Madagascar</title>
      <link>https://whu-pzhang.github.io/install-madagascar-on-linux/</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/install-madagascar-on-linux/</guid>
      <description>&lt;p&gt;Madagascar 是与Seismic_Unix 以及 SEPlib 差不多的一套东西。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一些有用的算法收集</title>
      <link>https://whu-pzhang.github.io/useful-algorithms/</link>
      <pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/useful-algorithms/</guid>
      <description>&lt;p&gt;收集了一些可能会用到的小算法。&lt;/p&gt;

&lt;h2 id=&#34;判断字节序&#34;&gt;判断字节序&lt;/h2&gt;

&lt;p&gt;在处理数据是常常会碰到字节序(Byte Endian)的问题&lt;/p&gt;

&lt;p&gt;Linux下可以直接用Shell命令查看：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lscpu | grep -i byte
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux安装Sublime Text 3</title>
      <link>https://whu-pzhang.github.io/install-sublime-text-3-under-linux/</link>
      <pubDate>Tue, 22 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/install-sublime-text-3-under-linux/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;已全面转向 Atom，本文不再更新。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Sublime Text 3作为一款跨平台的编辑器，支持多种插件，语法高亮齐全，而且还有vi模式，
在Window环境下一直用的是这款编辑器。本文记录在CentOS7下安装，配置Sublime Text 3的过程。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>getopt用法</title>
      <link>https://whu-pzhang.github.io/usage-of-getopt/</link>
      <pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/usage-of-getopt/</guid>
      <description>&lt;h2 id=&#34;getopt介绍&#34;&gt;getopt介绍&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;getopt&lt;/code&gt; 为Linux下处理命令行参数的函数，相对于自己编写代码来解析命令行参数，
getopt提供了更为方便和友好的方式。&lt;/p&gt;

&lt;p&gt;函数 &lt;code&gt;getopt&lt;/code&gt; 包含于系统头文件 &lt;code&gt;unistd.h&lt;/code&gt; 中，其函数原型为:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int getopt(int argc, char *const argv[], const char *optstring);
extern char *optarg;
extern int optind, opterr, optopt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C语言中二维数组的动态分配</title>
      <link>https://whu-pzhang.github.io/dynamic-allocate-2d-array/</link>
      <pubDate>Sun, 02 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/dynamic-allocate-2d-array/</guid>
      <description>&lt;p&gt;在C语言中，数组是最常用到的。分为静态数组和动态数组。
静态数据即数组长度预先定义好，一旦给定大小就无法再改变长度，静态数组用完后会自动释放
内存。&lt;/p&gt;

&lt;p&gt;动态数组的长度则是随程序的需要来指定的。其需要的内存由内存分配函数 &lt;code&gt;malloc&lt;/code&gt; 或 &lt;code&gt;calloc&lt;/code&gt;
从堆（heap）上分配，用完后需要程序员自己释放内存。&lt;/p&gt;

&lt;p&gt;标准C语言中提供了一维数组动态分配和释放的函数，包含于头文件 &lt;code&gt;stdlib.h&lt;/code&gt; 中。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数组和指针</title>
      <link>https://whu-pzhang.github.io/array-and-pointer/</link>
      <pubDate>Fri, 31 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/array-and-pointer/</guid>
      <description>&lt;h2 id=&#34;数组名和指针&#34;&gt;数组名和指针&lt;/h2&gt;

&lt;p&gt;在C语言中，数组和指针是紧密联系在一起的，对于数组来说，数组名就是数组第一个元素的地址，
不同的是数组名是一个常量，而指针则是变量。这是两者之间的最主要区别。&lt;/p&gt;

&lt;p&gt;事实上，数组名和指针除了上述区别外，还有其他的一些不同：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在声明时，只有作为函数参数的数组名编译器会将其转化成指针。其他情况下，数组名和指针是完全不一样的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在引用上，数组名只需访问内存一次；而指针需要访问内存两次。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;若a是一个数组名，p为指向该数组的指针变量，使用 &lt;code&gt;a&lt;/code&gt; 和 &lt;code&gt;&amp;amp;a&lt;/code&gt; 得到的值是一样的。对 &lt;code&gt;p&lt;/code&gt; 来说则不一样&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;sizeof a&lt;/code&gt; 得到的是整个数组所占字节的大小，而 &lt;code&gt;sizeof p&lt;/code&gt; 得到的是指针所占字节的大小(32位系统为4个字节，64位系统为8个字节)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;尽管 &lt;code&gt;a&lt;/code&gt;和 &lt;code&gt;&amp;amp;a[0]&lt;/code&gt; 得到的地址是一样的，但是其意义是不一样的，&lt;code&gt;a&lt;/code&gt;表示的是存储数组这块连续内存空间的首地址而 &lt;code&gt;&amp;amp;a[0]&lt;/code&gt;表示的是数组第一个元素的首地址。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>地球物理学家列表</title>
      <link>https://whu-pzhang.github.io/geophysicist/</link>
      <pubDate>Thu, 23 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/geophysicist/</guid>
      <description>欢迎补充。 天然地震 Name Keywords Charles J. Ammon Don L. Anderson Andrew Curtis Chris Chapman Robert W. Clayton Vernon F. Cormier Arwen Deuss Stephen Shangxing Gao Peter Gerstoft Yu Jeffrey Gu Donald V. Helmberger Robert van der Hilst Kei Hirose Miaki Ishii Chen Ji Keith D. Koper Gabi Laske Fan-Chi Lin Thorne Lay Guy Master Fenglin Niu Zhigang Peng Barbara Romanowicz Jeroen Ritsema Michael</description>
    </item>
    
    <item>
      <title>Python多版本共存之pyenv</title>
      <link>https://whu-pzhang.github.io/python-env/</link>
      <pubDate>Wed, 22 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/python-env/</guid>
      <description>&lt;p&gt;经常遇到这样的情况：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;系统自带的Python是2.6，自己需要Python 2.7中的某些特性；&lt;/li&gt;
&lt;li&gt;系统自带的Python是2.x，自己需要Python 3.x；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此时需要在系统中安装多个Python，但又不能影响系统自带的Python，即需要实现Python的多版本共存。&lt;a href=&#34;https://github.com/yyuu/pyenv&#34;&gt;pyenv&lt;/a&gt; 就是这样一个Python版本管理器。&lt;/p&gt;

&lt;h2 id=&#34;安装pyenv&#34;&gt;安装pyenv&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone git://github.com/yyuu/pyenv.git ~/.pyenv
$ echo &#39;export PYENV_ROOT=&amp;quot;$HOME/.pyenv&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
$ echo &#39;export PATH=&amp;quot;$PATH:$PYENV_ROOT/bin&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
$ echo &#39;eval &amp;quot;$(pyenv init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
$ exec $SHELL -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://whu-pzhang.github.io/hello-world/</link>
      <pubDate>Tue, 14 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/hello-world/</guid>
      <description>&lt;p&gt;Hello World! 欢迎来到 pzhang 的个人博客。&lt;/p&gt;

&lt;p&gt;博客成立于2015年，主要关注地震学的基础知识、相关软件以及编程语言和工具。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS 7安装及配置</title>
      <link>https://whu-pzhang.github.io/linux-environment-for-seismology/</link>
      <pubDate>Tue, 15 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/linux-environment-for-seismology/</guid>
      <description>&lt;p&gt;&lt;strong&gt;转载于 Seisman &lt;a href=&#34;https://seisman.info/linux-environment-for-seismology-research.html&#34;&gt;用 CentOS 7 打造合适的科研环境&lt;/a&gt;&lt;/strong&gt;，
部分小节按照自己需求有更改。&lt;/p&gt;

&lt;p&gt;这篇博文记录了我用 CentOS 7 搭建 &lt;strong&gt;地震学科研环境&lt;/strong&gt; 的过程，供我个人在未来重装系统时参考。
对于其他地震学科研人员，也许有借鉴意义。&lt;/p&gt;

&lt;p&gt;阅读须知：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;本文适用于个人电脑，不适用于服务器；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不推荐刚接触 Linux 的人使用 CentOS 发行版&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;本文尽量写的浅显易懂，但要求读者掌握 Linux 基础知识；&lt;/li&gt;
&lt;li&gt;本文所有操作均在 CentOS 7 下完成，其他发行版或多或少与 CentOS 7 不同，因而仅供参考；&lt;/li&gt;
&lt;li&gt;本文所安装的软件纯粹出于个人习惯及喜好，读者应自己判断，按需安装；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>地球物理相关软件</title>
      <link>https://whu-pzhang.github.io/geo-software/</link>
      <pubDate>Thu, 20 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://whu-pzhang.github.io/geo-software/</guid>
      <description>转载于 Seisman。 通用数据处理 SAC: Seismic Analysis Code，地震学数据处理的常用软件。 CPS330 ObsPy: 基于 Python 的地震学数据处理框架 数据格式转换 rdseed: SEED 格式转换为 SAC 等地震</description>
    </item>
    
  </channel>
</rss>